weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
initial_wealth = 100000
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
head(sim1)
head(sim1)
hist(sim1[,n_days], 25) #25 bins
hist(sim1[,n_days], 35)
hist(sim1[,n_days], 60)
hist(sim1[,n_days], 100)
hist(sim1[,n_days], 100) #100 bins
# Profit/loss
mean(sim1[,n_days])
mean(sim1[,n_days] - initial_wealth)
hist(sim1[,n_days]- initial_wealth, breaks=30)
hist(sim1[,n_days]- initial_wealth, breaks=100)
max(sim1[,n_days])
hist(sim1[,n_days]- initial_wealth, breaks=100)
hist(sim1[,n_days], xlim=c(0,30)) #100 bins
hist(sim1[,n_days]) #100 bins
hist(sim1[,n_days], xlim=c(-200000,200000)) #100 bins
hist(sim1[,n_days], xlim=c(0,200000)) #100 bins
hist(sim1[,n_days], xlim=c(0,200000),50) #100 bins
hist(sim1[,n_days], xlim=c(0,200000),80) #100 bins
range(sim1[,n_days])
hist(sim1[,n_days], xlim=c(0,650000),80) #100 bins
hist(sim1[,n_days]- initial_wealth, breaks=100)
# 5% value at risk:
quantile(sim1[,n_days]- initial_wealth, prob=0.05)
mystocks = c("FUD", "IBMI","GQRE","INKM")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(FUDa),
ClCl(IBMIa),
ClCl(GQREa),
ClCl(INKMa)
)
head(all_returns)
all_returns = as.matrix(na.omit(all_returns))
# Compute the returns from the closing prices
pairs(all_returns)
rm(list=ls())
library(mosaic)
library(quantmod)
library(foreach)
mystocks = c("AMZN", "V", "APPL","BBY")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(AMZNa)
# Combine all the returns in a matrix
all_returns = cbind(ClCl(AMZNa),ClCl(Va),ClCl(APPLa),ClCl(BBYa))
head(all_returns)
all_returns = as.matrix(na.omit(all_returns))
# Compute the returns from the closing prices
pairs(all_returns)
# simulate many different possible futures
initial_wealth = 100000
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
head(sim1)
hist(sim1[,n_days], 80) #80 bins
# I have some great outliner...
range(sim1[,n_days])
# Profit/loss
mean(sim1[,n_days])
mean(sim1[,n_days] - initial_wealth)
hist(sim1[,n_days]- initial_wealth, breaks=100)
# 5% value at risk:
quantile(sim1[,n_days]- initial_wealth, prob=0.05)
#5% of my simulated futures have a loss of worse than $10119
#95% of the simulated futures are better than losing $10119
head(sim1)
# simulate many different possible futures
initial_wealth = 100000
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
rm(list=ls())
library(mosaic)
library(quantmod)
library(foreach)
mystocks = c("AMZN", "V", "APPL","BBY")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(AMZNa)
# Combine all the returns in a matrix
all_returns = cbind(ClCl(AMZNa),ClCl(Va),ClCl(APPLa),ClCl(BBYa))
rm(list=ls())
library(mosaic)
library(quantmod)
library(foreach)
mystocks = c("AMZN", "V", "FXL","BBY")
myprices = getSymbols(mystocks, from = "2015-01-01")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(AMZNa)
# Combine all the returns in a matrix
all_returns = cbind(ClCl(AMZNa),ClCl(Va),ClCl(FXLa),ClCl(BBYa))
head(all_returns)
all_returns = as.matrix(na.omit(all_returns))
# Compute the returns from the closing prices
pairs(all_returns)
# simulate many different possible futures
initial_wealth = 100000
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
head(sim1)
hist(sim1[,n_days], 80) #80 bins
# I have some great outliner...
range(sim1[,n_days])
# Profit/loss
mean(sim1[,n_days])
mean(sim1[,n_days] - initial_wealth)
hist(sim1[,n_days]- initial_wealth, breaks=100)
# 5% value at risk:
quantile(sim1[,n_days]- initial_wealth, prob=0.05)
mystocks = c("FUD", "IBMI","GQRE","INKM")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(FUDa),
ClCl(IBMIa),
ClCl(GQREa),
ClCl(INKMa)
)
head(all_returns)
all_returns = as.matrix(na.omit(all_returns))
# Compute the returns from the closing prices
pairs(all_returns)
# simulate many different possible futures
initial_wealth = 100000
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
head(sim1)
hist(sim1[,n_days], 25) #25 bins
# Profit/loss
mean(sim1[,n_days])
mean(sim1[,n_days] - initial_wealth)
hist(sim1[,n_days]- initial_wealth, breaks=30)
# 5% value at risk:
quantile(sim1[,n_days]- initial_wealth, prob=0.05)
mystocks = c("RJZ", "GBIL","SPVM","NUSC","VBK")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(RJZa),
ClCl(GBILa),
ClCl(SPVMa),
ClCl(NUSCa),
ClCl(VBKa)
)
head(all_returns)
mystocks = c("RJZ", "GBIL","SPVM","PSC","VBK")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(RJZa),
ClCl(GBILa),
ClCl(SPVMa),
ClCl(PSCa),
ClCl(VBKa)
)
head(all_returns)
mystocks = c("RJZ", "GBIL","SPVM","OUSM","VBK")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(RJZa),
ClCl(GBILa),
ClCl(SPVMa),
ClCl(OUSMa),
ClCl(VBKa)
)
head(all_returns)
mystocks = c("RJZ", "GBIL","SPVM","IGM","VBK")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(RJZa),
ClCl(GBILa),
ClCl(SPVMa),
ClCl(IGMa),
ClCl(VBKa)
)
head(all_returns)
mystocks = c("RJZ", "SVXY","SPVM","IGM","VBK")
myprices = getSymbols(mystocks, from = "2015-01-01")
#adjusting all stocks
for(ticker in mystocks) {
expr = paste0(ticker, "a = adjustOHLC(", ticker, ")")
eval(parse(text=expr))
}
head(FUDa)
# Combine all the returns in a matrix
all_returns = cbind( ClCl(RJZa),
ClCl(SVXYa),
ClCl(SPVMa),
ClCl(IGMa),
ClCl(VBKa)
)
head(all_returns)
all_returns = as.matrix(na.omit(all_returns))
# Compute the returns from the closing prices
pairs(all_returns)
# simulate many different possible futures
initial_wealth = 100000
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.25, 0.25, 0.25, 0.25)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
sim1 = foreach(i=1:50000, .combine='rbind') %do% {
total_wealth = initial_wealth
weights = c(0.2,0.2,0.2,0.2,0.2)
holdings = weights * total_wealth
n_days = 20 #4 weeks
wealthtracker = rep(0, n_days)
for(today in 1:n_days) {
return.today = resample(all_returns, 1, orig.ids=FALSE)
holdings = holdings + holdings*return.today
total_wealth = sum(holdings)
wealthtracker[today] = total_wealth
}
wealthtracker
}
head(sim1)
hist(sim1[,n_days], 25) #25 bins
# Profit/loss
mean(sim1[,n_days])
mean(sim1[,n_days] - initial_wealth)
hist(sim1[,n_days]- initial_wealth, breaks=30)
# 5% value at risk:
quantile(sim1[,n_days]- initial_wealth, prob=0.05)
smkt <- read.csv("../STA380/data/social_marketing.csv")
setwd("C:/Users/amber/Downloads/Predictive Modeling R/STA_380_part2_exercise")
smkt <- read.csv("../STA380/data/social_marketing.csv")
smkt <- read.csv("../STA380/data/social_marketing.csv")
View(smkt)
View(smkt)
cars = read.csv('../STA380/data/cars.csv', header=TRUE)
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
summary(cars)
X = smkt[1:]
X = smkt[,1:]
X = smkt[,(1:)]
X = smkt[-1]
View(X)
View(X)
View(smkt)
View(smkt)
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
X.isna()
View(smkt)
View(smkt)
#Center and scales
mu = attr(X,"scaled:center")
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:center")
clust1 = kmeans(X, 6, nstart=25)
# What are the clusters?
clust1$center  # not super helpful
clust1$center[1,]*sigma + mu
clust1$center[2,]*sigma + mu
clust1$center[4,]*sigma + mu
X = scale(X, center= TRUE, scale= TRUE)
#Center and scales
mu = attr(X,"scaled:center")
# Run k-means with 6 clusters and 25 starts
clust1 = kmeans(X, 6, nstart=25)
sigma = attr(X,"scaled:center")
# Run k-means with 6 clusters and 25 starts
clust1 = kmeans(X, 6, nstart=25)
# What are the clusters?
clust1$center  # not super helpful
clust1$center[1,]*sigma + mu
clust1$center[2,]*sigma + mu
clust1$center[4,]*sigma + mu
View(clust1)
View(clust1)
clust1$center  # not super helpful
mu
which(clust1$cluster == 1)
# A few plots with cluster membership shown
# qplot is in the ggplot2 library
qplot(Weight, Length, data=cars, color=factor(clust1$cluster))
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
cars = read.csv('../STA380/data/cars.csv', header=TRUE)
summary(cars)
# Center and scale the data
X = cars[,-(1:9)]
X = scale(X, center=TRUE, scale=TRUE)
# Extract the centers and scales from the rescaled data (which are named attributes)
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:scale")
# Run k-means with 6 clusters and 25 starts
clust1 = kmeans(X, 6, nstart=25)
# What are the clusters?
clust1$center  # not super helpful
clust1$center[1,]*sigma + mu
clust1$center[2,]*sigma + mu
clust1$center[4,]*sigma + mu
# Which cars are in which clusters?
which(clust1$cluster == 1)
which(clust1$cluster == 2)
which(clust1$cluster == 3)
which(clust1$cluster == 4)
which(clust1$cluster == 5)
# A few plots with cluster membership shown
# qplot is in the ggplot2 library
qplot(Weight, Length, data=cars, color=factor(clust1$cluster))
qplot(Horsepower, CityMPG, data=cars, color=factor(clust1$cluster))
clust1$cluster
# Q4
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
smkt <- read.csv("../STA380/data/social_marketing.csv")
X = smkt[-1]
X = scale(X, center= TRUE, scale= TRUE)
#Center and sigma
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:center")
# Run k-means with 6 clusters and 25 starts
clust = kmeanspp(X, k=6, nstart=25)
# What are the clusters?
clust$center[1,]*sigma + mu
clust$center[4,]*sigma + mu
# Which cars are in which clusters?
which(clust$cluster == 1)
which(clust$cluster == 2)
# A few plots with cluster membership shown
# qplot is in the ggplot2 library
qplot(Weight, Length, data=cars, color=factor(clust1$cluster))
qplot(Horsepower, CityMPG, data=cars, color=factor(clust1$cluster))
clust$withinss
sum(clust$withinss)
clust$tot.withinss
clust$betweenss
ret = c(0,0)*30
ret
m <- matrix(0, ncol = 2, nrow = 30)
clust$tot.withinss
clust$betweenss
sum(clust$withinss)
# Q4
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
smkt <- read.csv("../STA380/data/social_marketing.csv")
X = smkt[-1]
X = scale(X, center= TRUE, scale= TRUE)
#Center and sigma
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:center")
m <- matrix(0, ncol = 2, nrow = 30)
for (i in 1:30){
# Run k-means with 6 clusters and 25 starts
clust = kmeanspp(X, k=6, nstart=25)
# What are the clusters?
clust$center[1,]*sigma + mu
clust$center[4,]*sigma + mu
# Which cars are in which clusters?
which(clust$cluster == 1)
which(clust$cluster == 2)
m[i,1] = clust$tot.withinss
m[i,2] = clust$betweenss
}
m
